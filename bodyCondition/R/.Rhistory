event <- unique(mergeLabels_subset$EventID)[i]
newDat <- mergeLabels_subset[mergeLabels_subset$EventID == event, ]
mergeLabels_subset$topLabelEvent[i] <- newDat[which.max(newDat$topLabelScore), "topLabel"]
mergeLabels_subset$date_timeEvent[i] <- as.character(ymd_hms(newDat[which.max(newDat$topLabelScore), "date_time"]))
}
mergeLabels_subset_events <- unique(mergeLabels_subset[,c("FileName_New",
"Station",
"Species_Appsilon",
"date_timeEvent",
"topLabelEvent",
"EventID"
)])
head(mergeLabels_subset_events)
mergeLabels_subset_events <- unique(mergeLabels_subset[,c("Station",
"Species_Appsilon",
"date_timeEvent",
"topLabelEvent",
"EventID"
)])
head(mergeLabels_subset_events)
# Select the species with highers probability in each event
mergeLabels_subset$topLabelEvent <- NA
mergeLabels_subset$date_timeEvent <- ""
for(i in 1:length(unique(mergeLabels_subset$EventID))){
event <- unique(mergeLabels_subset$EventID)[i]
newDat <- mergeLabels_subset[mergeLabels_subset$EventID == event, ]
mergeLabels_subset$topLabelEvent[i] <- newDat[which.max(newDat$topLabelScore), "topLabel"]
mergeLabels_subset$date_timeEvent[i] <- as.character(as.Date(ymd_hms(newDat[which.max(newDat$topLabelScore), "date_time"])))
}
mergeLabels_subset_events <- unique(mergeLabels_subset[,c("Station",
"Species_Appsilon",
"date_timeEvent",
"topLabelEvent",
"EventID"
)])
head(mergeLabels_subset_events)
i = 1
event <- unique(mergeLabels_subset$EventID)[i]
newDat <- mergeLabels_subset[mergeLabels_subset$EventID == event, ]
newDat
as.factor(newDat[which.max(newDat$topLabelScore), "topLabel"])
mergeLabels_subset$topLabelEvent[i]
mergeLabels_subset$topLabelEvent[i] <- as.factor(newDat[which.max(newDat$topLabelScore), "topLabel"])
# Select the species with highers probability in each event
mergeLabels_subset$topLabelEvent <- mergeLabels_subset$topLabel
mergeLabels_subset$date_timeEvent <- ""
event <- unique(mergeLabels_subset$EventID)[i]
newDat <- mergeLabels_subset[mergeLabels_subset$EventID == event, ]
mergeLabels_subset$topLabelEvent[i] <- as.factor(newDat[which.max(newDat$topLabelScore), "topLabel"])
mergeLabels_subset$topLabelEvent[i]
mergeLabels_subset$topLabelEvent[i] <-newDat[which.max(newDat$topLabelScore), "topLabel"]
mergeLabels_subset$topLabelEvent[i]
mergeLabels_subset$date_timeEvent[i] <- as.character(as.Date(ymd_hms(newDat[which.max(newDat$topLabelScore), "date_time"])))
mergeLabels_subset$date_timeEvent[i]
# Select the species with highers probability in each event
mergeLabels_subset$topLabelEvent <- mergeLabels_subset$topLabel
mergeLabels_subset$date_timeEvent <- ""
for(i in 1:length(unique(mergeLabels_subset$EventID))){
event <- unique(mergeLabels_subset$EventID)[i]
newDat <- mergeLabels_subset[mergeLabels_subset$EventID == event, ]
mergeLabels_subset$topLabelEvent[i] <-newDat[which.max(newDat$topLabelScore), "topLabel"]
mergeLabels_subset$date_timeEvent[i] <- as.character(as.Date(ymd_hms(newDat[which.max(newDat$topLabelScore), "date_time"])))
}
mergeLabels_subset_events <- unique(mergeLabels_subset[,c("Station",
"Species_Appsilon",
"date_timeEvent",
"topLabelEvent",
"EventID"
)])
head(mergeLabels_subset_events)
i = 2
event <- unique(mergeLabels_subset$EventID)[i]
event
mergeLabels_subset[mergeLabels_subset$EventID == event, ]
eventList <- vector("list", length = length(unique(mergeLabels_subset$EventID)))
# Select the species with highers probability in each event
mergeLabels_subset$topLabelEvent <- mergeLabels_subset$topLabel
mergeLabels_subset$date_timeEvent <- ""
eventList <- vector("list", length = length(unique(mergeLabels_subset$EventID)))
# Select the species with highers probability in each event
mergeLabels_subset$topLabelEvent <- mergeLabels_subset$topLabel
mergeLabels_subset$date_timeEvent <- ""
eventList <- vector("list", length = length(unique(mergeLabels_subset$EventID)))
for(i in 1:length(unique(mergeLabels_subset$EventID))){
event <- unique(mergeLabels_subset$EventID)[i]
newDat <- mergeLabels_subset[mergeLabels_subset$EventID == event, ]
newDat$topLabelEvent <- newDat[which.max(newDat$topLabelScore), "topLabel"]
newDat$date_timeEvent <- as.character(as.Date(ymd_hms(newDat[which.max(newDat$topLabelScore), "date_time"])))
eventList[[i]] <- newDat
}
mergeLabels_subset_events <- do.call("rbind", eventList)
mergeLabels_subset_events <- unique(mergeLabels_subset_events[,c("Station",
"Species_Appsilon",
"date_timeEvent",
"topLabelEvent",
"EventID"
)])
head(mergeLabels_subset_events)
eventList[[1]]
newDat
eventList[[10]]
mergeLabels_subset_events <- unique(mergeLabels_subset_events[,c("Station",
"Species_Appsilon",
"date_timeEvent",
"topLabelEvent",
"EventID"
)])
head(mergeLabels_subset_events)
length(unique(mergeLabels_subset$EventID))
mergeLabels_subset_events <- unique(mergeLabels_subset_events[,c("Station",
"Species_Appsilon",
"date_timeEvent",
"topLabelEvent"
)])
head(mergeLabels_subset_events)
confusionMatrix(mergeLabels_subset_events$topLabelEvent, mergeLabels_subset_events$Species_Appsilon)
library(caret)
confusionMatrix(mergeLabels_subset_events$topLabelEvent, mergeLabels_subset_events$Species_Appsilon)
install.packages("golem")
library(golem)
golem::create_golem(pat)
golem::create_golem(path = "/home/robbie/Documents/GitHub/MbazaDoployez")
golem::create_golem(path = "/home/robbie/Documents/GitHub/MbazaDeployez")
load("~/Documents/GitHub/evalModels/data/LopeIvindo_modelTest.RData")
?log
load("~/Documents/GitHub/evalModels/data/LopeIvindo_modelTest.RData")
# Calculate baseline activity model for each focal species using full dataset and manual labels
manualActivityModels <- vector("list", length = length(focalSpecies))
for(i in 1:length(focalSpecies)){
TimesManual <- as.POSIXct(ymd_hms(
mergeLabels_subset[mergeLabels_subset$Species_Appsilon == focalSpecies[i],"date_time"]))
TimesManual <- gettime(TimesManual)
modManual <- fitact(TimesManual, sample = "model", reps = 200)
manualActivityModels[[i]] <- modManual
}
library(caret)
library(forcats)
library(yardstick)
library(ggplot2)
library(magick)
library(pheatmap)
library(viridis)
library(lubridate)
library(activity)
# Calculate baseline activity model for each focal species using full dataset and manual labels
manualActivityModels <- vector("list", length = length(focalSpecies))
for(i in 1:length(focalSpecies)){
TimesManual <- as.POSIXct(ymd_hms(
mergeLabels_subset[mergeLabels_subset$Species_Appsilon == focalSpecies[i],"date_time"]))
TimesManual <- gettime(TimesManual)
modManual <- fitact(TimesManual, sample = "model", reps = 200)
manualActivityModels[[i]] <- modManual
}
# Calculate baseline activity model for each focal species using full dataset and manual labels
manualActivityModels <- vector("list", length = length(focalSpecies))
for(i in 1:length(focalSpecies)){
TimesManual <- as.POSIXct(ymd_hms(
mergeLabels_subset[mergeLabels_subset$Species_Appsilon == focalSpecies[i],"date_time"]))
TimesManual <- gettime(TimesManual)
modManual <- fitact(TimesManual, sample = "model", reps = 200)
manualActivityModels[[i]] <- modManual
}
modManual[[1]]
manualActivityModels[[1]]
compareAct(list(manualActivityModels[[1]], manualActivityModels[[1]]))
#Calculate activity patterns for focal species
MLActivityModels <- vector("list", length = length(thresholds)*length(focalSpecies))
# Calculate baseline activity model for each focal species using full dataset and manual labels
manualActivityModels <- vector("list", length = length(focalSpecies))
for(i in 1:length(focalSpecies)){
TimesManual <- as.POSIXct(ymd_hms(
mergeLabels_subset[mergeLabels_subset$Species_Appsilon == focalSpecies[i],"date_time"]))
TimesManual <- gettime(TimesManual)
modManual <- fitact(TimesManual, sample = "model", reps = 200)
manualActivityModels[[i]] <- modManual
}
#Calculate activity patterns for focal species
MLActivityModels <- vector("list", length = length(thresholds)*length(focalSpecies))
for(i in 1:length(thresholds)) {
MLfocalSpeciesList <- vector("list", length = length(focalSpecies))
newDat <-
mergeLabels_subset[mergeLabels_subset$topLabelScore >= thresholds[i], ]
for (j in 1:length(focalSpecies)) {
newDatSpecies <- newDat[newDat$topLabel == focalSpecies[j], ]
if (nrow(newDatSpecies) > 10) {# Don't calculate if n < 10
TimesML <- as.POSIXct(ymd_hms(newDatSpecies[newDatSpecies$topLabel == focalSpecies[j], "date_time"]))
TimesML <- gettime(TimesML)
modML <- fitact(TimesML, sample = "model", reps = 200)
} else {
modML <- NA
}
MLActivityModels[[i]] <- modML
}
}
compareAct(MLActivityModels[[1]], manualActivityModels[[1]])
compareAct(list(MLActivityModels[[1]], manualActivityModels[[1]]))
# Compare models
compareList <- vector("list", length = length(manualActivityModels))
# Compare models
compareList <- vector("list", length = length(manualActivityModels))
for(i in 1:length(manualActivityModels)){
compareList[[i]] <- compareAct(list(MLActivityModels[[i]], manualActivityModels[[i]]))
}
compareList
for(i in 1:length(MLActivityModels)){
compareList[[i]] <- compareAct(list(MLActivityModels[[i]], manualActivityModels[[i]]))
}
# Compare models
compareList <- vector("list", length = length(MLActivityModelsActivityModels))
for(i in 1:length(MLActivityModels)){
compareList[[i]] <- compareAct(list(MLActivityModels[[i]], manualActivityModels[[i]]))
}
i
# Compare models
compareList <- vector("list", length = length(MLActivityModels))
for(i in 1:length(MLActivityModels)){
compareList[[i]] <- compareAct(list(MLActivityModels[[i]], manualActivityModels[[i]]))
}
for(i in 1:length(compareList)){
compareList[[i]] <- compareAct(list(MLActivityModels[[i]], manualActivityModels[[i]]))
}
MLActivityModels[[i]]
manualActivityModels[[i]]
manualActivityModels[[i]]
manualActivityModels[[i]]
manualActivityModels[[i]]
manualActivityModels[[i]]
manualActivityModels[[i]]
manualActivityModels[[i]]
manualActivityModels[[i]]
# Compare models
compareList <- vector("list", length = length(MLActivityModels))
for(i in 1:length(thresholds)){
for(j in 1:length(focalSpecies)){
compareList[[i]] <- compareAct(list(MLActivityModels[[i]], manualActivityModels[[j]]))
}
}
compareList
compareAct(list(MLActivityModels[[i]], manualActivityModels[[j]])
compareAct(list(MLActivityModels[[i]], manualActivityModels[[j]])
compareAct(list(MLActivityModels[[i]], manualActivityModels[[j]]))
for(i in 1:length(thresholds)){
for(j in 1:length(focalSpecies)){
res <- data.frame(compareAct(list(MLActivityModels[[i]], manualActivityModels[[j]])))
res$Species <- focalSpecies[j]
res$Threshold <- thresholds[i]
compareResDF <- rbind(compareResDF, res)
}
}
# Compare models
compareResDF <- data.frame(Difference = NA,
SE = NA,
W = NA,
p = NA,
Species = NA,
Threshold = NA)
for(i in 1:length(thresholds)){
for(j in 1:length(focalSpecies)){
res <- data.frame(compareAct(list(MLActivityModels[[i]], manualActivityModels[[j]])))
res$Species <- focalSpecies[j]
res$Threshold <- thresholds[i]
compareResDF <- rbind(compareResDF, res)
}
}
compareResDF
plot(Difference ~ Threshold, data = compareResDF)
MLActivityModels
summary(MLActivityModels)
compareResDF
plot(Difference ~ Threshold, data = subset(compareResDF, Species == "Elephant_African"))
plot(Difference ~ Threshold, data = subset(compareResDF, Species == "Chimpanzee"))
plot(Difference ~ Threshold, data = subset(compareResDF, Species == "Gorilla"))
plot(Difference ~ Threshold, data = subset(compareResDF, Species == "Cat_Golden"))
plot(Difference ~ Threshold, data = subset(compareResDF, Species == "Elephant_African"))
plot(Difference ~ Threshold, data = subset(compareResDF, Species == "Chimpanzee"))
plot(Difference ~ Threshold, data = subset(compareResDF, Species == "Gorilla"))
plot(Difference ~ Threshold, data = subset(compareResDF, Species == "Cat_Golden"))
# Compare models
compareResDF <- data.frame(Difference = NA,
SE = NA,
W = NA,
p = NA,
Species = NA,
Threshold = NA)
for(i in 1:length(thresholds)){
for(j in 1:length(focalSpecies)){
res <- data.frame(compareAct(list(MLActivityModels[[j]], manualActivityModels[[j]])))
res$Species <- focalSpecies[j]
res$Threshold <- thresholds[i]
compareResDF <- rbind(compareResDF, res)
}
}
plot(Difference ~ Threshold, data = subset(compareResDF, Species == "Elephant_African"))
plot(Difference ~ Threshold, data = subset(compareResDF, Species == "Chimpanzee"))
plot(Difference ~ Threshold, data = subset(compareResDF, Species == "Gorilla"))
plot(Difference ~ Threshold, data = subset(compareResDF, Species == "Cat_Golden"))
helper <- rep(thresholds, length = length(focalSpecies))
helper
shiny::runApp('Documents/GitHub/EcoAssetManager')
# Load packages (keep list alphabetical order!)
packageList <- c("DT",
"exifr",
"leaflet",
"leaflet.extras",
"lubridate",
"raster",
"rgdal",
"shiny",
#"shinycssloaders", not currently used
"shinydashboard",
"sf",
"shinyjs",
"sp",
"stringr",
"tools",
"utils",
"shinyfiles")
install.packages(packageList[which(!packageList %in% installed.packages())])
for(pkg in packageList) {
library(pkg, character.only = TRUE)
}
# Load packages (keep list alphabetical order!)
packageList <- c("DT",
"exifr",
"leaflet",
"leaflet.extras",
"lubridate",
"raster",
"rgdal",
"shiny",
#"shinycssloaders", not currently used
"shinydashboard",
"sf",
"shinyjs",
"sp",
"stringr",
"tools",
"utils",
"shinyFiles")
install.packages(packageList[which(!packageList %in% installed.packages())])
for(pkg in packageList) {
library(pkg, character.only = TRUE)
}
?shinyDirChoose
runApp('Documents/GitHub/EcoAssetManager')
openProjDir
setwd("~/Documents/GitHub/ElephantFruitsGabon/bodyCondition/R")
# Load libraries
library(lubridate)
library(MuMIn)
library(boot)
library(ggplot2)
library(tidyr)
library(cowplot)
library(lme4)
library(dplyr)
library(visreg)
#### Load and prep data ####
mergedClean <- read.csv("../data/public_bodyCondition_Dec2019.csv")
str(mergedClean)
summary(mergedClean)
# Format date variables
mergedClean$saveTime <- dmy_hm(mergedClean$saveTime)
mergedClean$DateTimeOriginal <- dmy_hm(mergedClean$DateTimeOriginal)
str(mergedClean)
summary(mergedClean)
# Get rid of 11 rows with NA DateTimeOriginal
mergedClean <- mergedClean[!is.na(mergedClean$DateTimeOriginal), ]
mergedClean <- droplevels(mergedClean)
summary(mergedClean)
# Get rid of 2 rows with NA bodyScore
mergedClean <- mergedClean[!is.na(mergedClean$bodyScore), ]
mergedClean <- droplevels(mergedClean)
summary(mergedClean)
# Compare frequency plots of body condition scores for all scorers
mergedClean <-
mergedClean[!duplicated(paste0(mergedClean$scorerCode, mergedClean$uniqueName)), ]
# par(mfrow = c(4, 4))
# for (i in 1:length(unique(mergedClean$scorerCode))) # {
#   score <-
#     mergedClean[mergedClean$scorerCode == unique(mergedClean$scorerCode)[i], "bodyScore"]
#   hist(score, main =  unique(mergedClean$scorerCode)[i])
#
# }
# Summary of scorer effort
table(mergedClean$scorerCode)
# Remove anyone who did less than 150 images (C, F, H, K)
# Remove 'A' as they did not complete the test dataset
# Remove 'B' who failed to meet the scoring criteria of the test dataset
# Remove 'M' (author Robin Whytock) who was not blinded from the research questions and had knowledge of the dates when images were taken
mergedClean <- mergedClean[mergedClean$scorerCode %in% c(#"A",
#"B",
#"C",
"D",
"E",
#"F",
"G",
#"H",
"I",
"J",
#"K",
"L"
#"M"
), ]
mergedClean <- droplevels(mergedClean)
table(mergedClean$scorerCode)
summary(mergedClean)
# Remove first 50 scores for each person as training 'burn in'
scorerCode <- unique(mergedClean$scorerCode)
removeBurnIn <- vector("list", length = length(scorerCode))
for (i in 1:length(scorerCode)) {
newDat <- mergedClean[mergedClean$scorerCode == scorerCode[i],]
newDat <- newDat[order(ymd_hms(newDat$saveTime)), ]
removeBurnIn[[i]] <- newDat[51:nrow(newDat), ]
}
mergedClean <- do.call("rbind", removeBurnIn)
summary(mergedClean)
#### Get summary stats for final dataset ####
# Combine sources Schuttler, S and Whittaker, A (these are all from Whittaker, A)
#levels(mergedClean$source)[7] <- "Whittaker, A"
#levels(mergedClean$source)
mergedClean <- droplevels(mergedClean)
# Calculate n unique images per source
uniqueImages <- mergedClean[,c("uniqueName", "monthOnly", "yearOnly", "source")]
uniqueImages <- unique(uniqueImages) # 5172 scores, 2824 unique images
imageEffort <- as.data.frame.matrix(table(uniqueImages$source,
uniqueImages$yearOnly))
# Save image effort
write.csv(imageEffort, "../data/imageEffort.csv")
# Calculate n unique images per month and year
yearMonthEffort <- as.data.frame.matrix(table(uniqueImages$monthOnly,
uniqueImages$yearOnly))
write.csv(yearMonthEffort, "../data/yearMonthEffort.csv")
# Look at scoring effort over time
# Eyeball data
par(mfrow = c(1, 1))
hist(mergedClean$bodyScore)
# Scale year and month
mergedClean$monthOnlyScale <-
as.numeric(scale(mergedClean$monthOnly))
mergedClean$yearOnlyScale <-
as.numeric(scale(mergedClean$yearOnly))
# Create capture events
head(mergedClean)
# Store unique sources and remove those that don't have time information to nearest minute
uniqueSources <- unique(mergedClean$source)
uniqueSources <- droplevels(uniqueSources[-c(8,9)])
# Create empty list to store results
eventList <- vector("list", length = length(uniqueSources))
for(i in 1:length(uniqueSources)){
newDat <- mergedClean[as.character(mergedClean$source) == as.character(uniqueSources[i]),]
# Select the unique images only
newDat <- newDat[,c("uniqueName", "DateTimeOriginal", "source")]
newDat <- unique(newDat)
newDat <- newDat[order(newDat$DateTimeOriginal),]
newDat$offsetTime[2:nrow(newDat)] <-
as.character(newDat[2:nrow(newDat) - 1, c("DateTimeOriginal")])
newDat$offsetTime <- ymd_hms(newDat$offsetTime)
newDat$timeOffset <- interval(newDat$offsetTime, ymd_hms(newDat$DateTimeOriginal))
newDat$timeOffset <- newDat$timeOffset/minutes(1)
newDat$eventSwitch <- ifelse(newDat$timeOffset > 10, 1, 0)
# Create switches to detect event
newDat$eventDetect <- 0
event <- 1
for(j in 1:(nrow(newDat)-1)){
if(newDat$eventSwitch[j+1] == 1){
event <- event+1
newDat$eventDetect[j+1] <- event
} else {
newDat$eventDetect[j+1] <- event
}
}
eventList[[i]] <- newDat
}
# Create unique events for each image in data from Momont, L and White, L
newDat <- mergedClean[as.character(mergedClean$source) %in% c("White, L", "Momont, L"),]
newDat <- droplevels(newDat[,c("uniqueName", "source")])
newDat <- unique(newDat)
newDat$eventDetect <- 1:nrow(newDat) # 59
newDat <- newDat[,c("uniqueName", "eventDetect")]
# merge all the data back together
eventListDF <- do.call("rbind", eventList)
eventListDF <- eventListDF[,c("uniqueName", "eventDetect")]
eventListDF <- rbind(eventListDF, newDat)
# Merge eventDetect with mergedClean
mergedClean <- merge(eventListDF, mergedClean)
mergedClean$event <- paste0(mergedClean$source, "_", mergedClean$eventDetect)
# One image from Whytock, R has wrong date time and needs removed (noticed during later analysis)
mergedClean <- mergedClean[-which(mergedClean$source == "Whytock, R" & mergedClean$yearOnly == 2000),]
length(unique(mergedClean$event)) # 891 unique events
# Calculate n unique events per source
uniqueEvents <- mergedClean[,c("event", "monthOnly", "yearOnly", "source")]
uniqueEvents <- unique(uniqueEvents) # 5172 scores, 2824 unique images
eventEffort <- as.data.frame.matrix(table(uniqueEvents$source,
uniqueEvents$yearOnly))
# Save image effort
write.csv(eventEffort, "../data/eventEffort.csv")
# Calculate n unique images per month and year
yearMonthEffortEvents <- as.data.frame.matrix(table(uniqueEvents$monthOnly,
uniqueEvents$yearOnly))
hist(mergedClean$bodyScore)
subset(mergedClean, bodyScore < 2)
subset(mergedClean, bodyScore < 3)
head(mergedClean)
subset(mergedClean, bodyScore < 3 & yearOnly < 2000)
table(mergedClean$event, mergedClean$yearOnly)
table(mergedClean$yearOnly, mergedClean$event)
table(mergedClean$yearOnly)
table(mergedClean$yearOnly, mergedClean$sex)
mergedClean_fem <- subset(mergedClean, sex == "female")
table(mergedClean_fem$yearOnly, mergedClean_fem$sex)
table(mergedClean_fem$yearOnly, mergedClean_fem$monthOnly)
