moran.plot(residuals.glm(mod3), lstw)
plot(
LongitudeNoScale ~ LatitudeNoScale,
data = datSubsetScale,
bg = color.gradient(datSubsetScale$mod2Resid),
pch = 21,
cex = 2,
ylab = "Longitude",
xlab = "Latitude"
)
color.gradient <- function(x, colors=c("blue","white","red"), colsteps=100) {
return( colorRampPalette(colors) (colsteps) [ findInterval(x, seq(min(x),max(x), length.out=colsteps)) ] )
}
plot(
LongitudeNoScale ~ LatitudeNoScale,
data = datSubsetScale,
bg = color.gradient(datSubsetScale$mod2Resid),
pch = 21,
cex = 2,
ylab = "Longitude",
xlab = "Latitude"
)
# Map the residuals
datSubsetScale$mod2Resid <- resid(mod2)
hist(datSubsetScale$mod2Resid)
color.gradient <- function(x, colors=c("blue","white","red"), colsteps=100) {
return( colorRampPalette(colors) (colsteps) [ findInterval(x, seq(min(x),max(x), length.out=colsteps)) ] )
}
plot(
LongitudeNoScale ~ LatitudeNoScale,
data = datSubsetScale,
bg = color.gradient(datSubsetScale$mod2Resid),
pch = 21,
cex = 2,
ylab = "Longitude",
xlab = "Latitude"
)
moran.plot(residuals.glm(mod3), lstw)
# Map the residuals
datSubsetScale$mod2Resid <- resid(mod2)
# Plot residuals
par(mfrow = c(1,3))
# Map the residuals
datSubsetScale$mod2Resid <- resid(mod2)
hist(datSubsetScale$mod2Resid)
color.gradient <- function(x, colors=c("blue","white","red"), colsteps=100) {
return( colorRampPalette(colors) (colsteps) [ findInterval(x, seq(min(x),max(x), length.out=colsteps)) ] )
}
plot(
LongitudeNoScale ~ LatitudeNoScale,
data = datSubsetScale,
bg = color.gradient(datSubsetScale$mod2Resid),
pch = 21,
cex = 2,
ylab = "Longitude",
xlab = "Latitude"
)
moran.plot(residuals.glm(mod3), lstw)
# Output results
tab_model(
mod3,
transform = "exp",
title = "Presence/absence of K. gilberti",
file = "modelOut.html"
)
plotMoran <- moran.plot(residuals.glm(mod3), lstw)
plotMoran
plotMoran$infmat[['dfb.1']]
plotMoran$infmat[['dfb.1']]
plotMoran$infmat['dfb.1']
plotMoran[['dfb.1']]
plotMoran$infmat
plotMoran$infmat[1,]
plotMoran$infmat[,1]
plotMoran$infmat[,1] ~ plotMoran$infmat[,2]
plot(plotMoran$infmat[,1] ~ plotMoran$infmat[,2])
plot(plotMoran$infmat[,1] ~ plotMoran$infmat[,3])
plot(plotMoran$infmat[,1] ~ plotMoran$infmat[,4])
plot(plotMoran$infmat[,2] ~ plotMoran$infmat[,4])
plot(plotMoran$infmat[,3] ~ plotMoran$infmat[,4])
plot(plotMoran$infmat[,5] ~ plotMoran$infmat[,4])
plot(plotMoran$infmat[,4] ~ plotMoran$infmat[,5])
moran.plot(residuals.glm(mod3), lstw)
plotMoran
plot(plotMoran$infmat[,2] ~ plotMoran$infmat[,1])
moran.plot(residuals.glm(mod3), lstw)
plot(plotMoran$infmat[,2] ~ plotMoran$infmat[,3])
plot(plotMoran$infmat[,3] ~ plotMoran$infmat[,1])
plot(plotMoran$infmat[,3] ~ plotMoran$infmat[,2])
plot(
LongitudeNoScale ~ LatitudeNoScale,
data = datSubsetScale,
bg = color.gradient(datSubsetScale$mod2Resid),
pch = 21,
cex = 2,
ylab = "Longitude",
xlab = "Latitude"
)
plotMoran <- moran.plot(residuals.glm(mod3), lstw)
# Moran's test using the residuals of the model
moran.mc(residuals.glm(mod3), lstw)
# Moran's test using the residuals of the model
moran.mc(residuals.glm(mod3), lstw, nsim = 100)
load("~/Documents/GitHub/evalModels/data/LopeIvindo_modelTest.RData")
#### Activity plots ####
# Create nice colours
lightOrange <- rgb(1, 0.4, 0, alpha = 0.3)
darkOrange <- rgb(1, 0.4, 0, alpha = 1)
lightBlue <- rgb(0, 0.4, 0.8, alpha = 0.3)
darkBlue <- rgb(0, 0.4, 0.8, alpha = 1)
# Elephants
par(mfrow = c(3,3), mar = c(2,2,2,2), oma = c(4,4,1,1))
for(i in 1:length(thresholds)){
plot(MLActivityModels[[i]][[5]],
dline = list(col = lightOrange),
tline = list(col = darkOrange, lwd = 2),
cline = list(col = NULL),
yunit = "density",
main = paste0("Threshold: ", thresholds[i]),
bty = "o")
plot(manualActivityModels[[5]],
add = TRUE,
dline = list(col = lightBlue),
tline = list(col = darkBlue, lwd =2),
cline = list(col = NULL),
yunit = "density")
}
par(mfrow = c(1,1))
plot(
coef ~ thresholds,
ylim = c(0.7, 1),
xlim = c(0.4, 1),
evalSpeciesRichnessCorr,
xlab = "Minimum threshold to accept top label (%)",
ylab = "Slope coefficient"
)
for(i in 1:length(thresholds)){
newDat <- speciesRichness[speciesRichness$threshold == thresholds[i],]
plot(
newDat$observedRichness ~ newDat$predictedRichness,
ylim = c(0, 20),
xlim = c(0, 20),
xlab = "",
ylab = "",
col = blue,
pch = 16,
cex = 1.2
)
evalSpeciesRichnessCorr$coef[i] <- coef(lm(observedRichness ~ predictedRichness, data = newDat))[[2]]
mod <- lm(observedRichness ~ predictedRichness, data = newDat)
evalSpeciesRichnessCorr$R2[i] <- summary(mod)$r.squared
predDat <- data.frame(predictedRichness = seq(min(newDat$predictedRichness),
max(newDat$predictedRichness),
length.out = nrow(newDat)))
pred <- predict(mod, newdata = predDat)
lines(pred ~ predDat$predictedRichness)
text(x = 19, paste0("Threshold: ", thresholds[i]), adj = -0.01)
text(x = 17, paste0("Slope coefficient: ", signif(evalSpeciesRichnessCorr$coef[i],2)), adj = -0.01)
text(x = 15, paste0("R sq: ", signif(evalSpeciesRichnessCorr$R2[i],2)), adj = -0.01)
}
# Plot the results
par(mfrow = c(3,3), mar = c(2,2,2,2), oma = c(4,4,1,1))
# Make a ncie color
blue = rgb(red = 0, green = 153, blue = 153, alpha = 125, maxColorValue = 255)
evalSpeciesRichnessCorr <- data.frame(thresholds = thresholds,
coef = NA,
R2 = NA)
for(i in 1:length(thresholds)){
newDat <- speciesRichness[speciesRichness$threshold == thresholds[i],]
plot(
newDat$observedRichness ~ newDat$predictedRichness,
ylim = c(0, 20),
xlim = c(0, 20),
xlab = "",
ylab = "",
col = blue,
pch = 16,
cex = 1.2
)
evalSpeciesRichnessCorr$coef[i] <- coef(lm(observedRichness ~ predictedRichness, data = newDat))[[2]]
mod <- lm(observedRichness ~ predictedRichness, data = newDat)
evalSpeciesRichnessCorr$R2[i] <- summary(mod)$r.squared
predDat <- data.frame(predictedRichness = seq(min(newDat$predictedRichness),
max(newDat$predictedRichness),
length.out = nrow(newDat)))
pred <- predict(mod, newdata = predDat)
lines(pred ~ predDat$predictedRichness)
text(x = 19, paste0("Threshold: ", thresholds[i]), adj = -0.01)
text(x = 17, paste0("Slope coefficient: ", signif(evalSpeciesRichnessCorr$coef[i],2)), adj = -0.01)
text(x = 15, paste0("R sq: ", signif(evalSpeciesRichnessCorr$R2[i],2)), adj = -0.01)
}
mtext("Predicted species richness", 1, line = 2, outer = TRUE)
mtext("Observed species richness", 2, line = 2, outer = TRUE)
load("~/Documents/GitHub/evalModels/data/LopeIvindo_modelTest.RData")
# Do by event
# create unique station date, species, event column
paste0(mergeLabels_subset$Station,
mergeLabels_subset$date_time,
mergeLabels_subset$topLabel,
)
# Do by event
# create unique station date, species, event column
paste0(mergeLabels_subset$Station,
mergeLabels_subset$date_time,
mergeLabels_subset$topLabel
)
# Do by event
# create unique station date, species, event column
paste(mergeLabels_subset$Station,
mergeLabels_subset$date_time,
mergeLabels_subset$topLabel,
sep = "_"
)
# Do by event
# create unique station date, species, event column
paste(mergeLabels_subset$Station,
mergeLabels_subset$date_time,
mergeLabels_subset$topLabel,
mergelabels_subset$event
sep = "_"
)
# Do by event
# create unique station date, species, event column
paste(mergeLabels_subset$Station,
mergeLabels_subset$date_time,
mergeLabels_subset$topLabel,
mergelabels_subset$event,
sep = "_"
)
# Do by event
# create unique station date, species, event column
paste(mergeLabels_subset$Station,
mergeLabels_subset$date_time,
mergeLabels_subset$topLabel,
mergeLabels_subset$CaptureEvent,
sep = "_"
)
length(unique(paste(mergeLabels_subset$Station,
mergeLabels_subset$date_time,
mergeLabels_subset$topLabel,
mergeLabels_subset$CaptureEvent,
sep = "_"
)))
library(lubridate)
length(unique(paste(mergeLabels_subset$Station,
mergeLabels_subset$topLabel,
mergeLabels_subset$CaptureEvent,
sep = "_"
)))
paste(mergeLabels_subset$Station,
mergeLabels_subset$topLabel,
mergeLabels_subset$CaptureEvent,
sep = "_"
)
length(unique(paste(mergeLabels_subset$Station,
ymd(mergeLabels_subset$date_time),
mergeLabels_subset$topLabel,
mergeLabels_subset$CaptureEvent,
sep = "_"
)))
mergeLabels_subset$date_time
length(unique(paste(mergeLabels_subset$Station,
dmy(ymd_hms(mergeLabels_subset$date_time)),
mergeLabels_subset$topLabel,
mergeLabels_subset$CaptureEvent,
sep = "_"
)))
ymd_hms(mergeLabels_subset$date_time)
ymd(ymd_hms(mergeLabels_subset$date_time))
ymd(ymd_hms(mergeLabels_subset$date_time))
length(unique(paste(mergeLabels_subset$Station,
ymd_hms(mergeLabels_subset$date_time),
mergeLabels_subset$topLabel,
mergeLabels_subset$CaptureEvent,
sep = "_"
)))
as.Date(ymd_hms(mergeLabels_subset$date_time))
length(unique(paste(mergeLabels_subset$Station,
as.Date(ymd_hms(mergeLabels_subset$date_time)),
mergeLabels_subset$topLabel,
mergeLabels_subset$CaptureEvent,
sep = "_"
)))
length(unique(paste(mergeLabels_subset$Station,
mergeLabels_subset$topLabel,
mergeLabels_subset$CaptureEvent,
sep = "_"
)))
sep = "_"
# Do by event
# create unique station date, species, event column
paste(mergeLabels_subset$Station,
as.Date(ymd_hms(mergeLabels_subset$date_time)),
mergeLabels_subset$topLabel,
mergeLabels_subset$CaptureEvent,
sep = "_"
)
# Do by event
# create unique station date, species, event column
mergeLabels_subset$EventID <- paste(mergeLabels_subset$Station,
as.Date(ymd_hms(mergeLabels_subset$date_time)),
mergeLabels_subset$topLabel,
mergeLabels_subset$CaptureEvent,
sep = "_"
)
i = 1
event <- unique(mergeLabels_subset$EventID)[i]
newDat <- mergeLabels_subset[mergeLabels_subset$EventID == event, ]
newDat
# Select the species with highers probability in each event
mergeLabels_subset$topLabelEvent <- NA
newDat[which.max(newDat$topLabelscore), "topLabel"]
newDat[which.max(newDat$topLabelscore), "topLabel"]
which.max(newDat$topLabelscore)
which.max(newDat$topLabelscore)
newDat[which.max(newDat$topLabelScore), "topLabel"]
mergeLabels_subset$date_timeEvent <- NA
# Select the species with highers probability in each event
mergeLabels_subset$topLabelEvent <- NA
mergeLabels_subset$date_timeEvent <- NA
for(i in 1:length(unique*mergeLabels_subset$EventID)){
event <- unique(mergeLabels_subset$EventID)[i]
newDat <- mergeLabels_subset[mergeLabels_subset$EventID == event, ]
mergeLabels_subset$topLabelEvent[i] <- newDat[which.max(newDat$topLabelScore), "topLabel"]
mergeLabels_subset$date_timeEvent[i] <- newDat[which.max(newDat$topLabelScore), "date_time"]
}
i = 1
event <- unique(mergeLabels_subset$EventID)[i]
newDat <- mergeLabels_subset[mergeLabels_subset$EventID == event, ]
mergeLabels_subset$topLabelEvent[i] <- newDat[which.max(newDat$topLabelScore), "topLabel"]
mergeLabels_subset$date_timeEvent[i] <- newDat[which.max(newDat$topLabelScore), "date_time"]
# Select the species with highers probability in each event
mergeLabels_subset$topLabelEvent <- NA
mergeLabels_subset$date_timeEvent <- NA
for(i in 1:length(unique(mergeLabels_subset$EventID))){
event <- unique(mergeLabels_subset$EventID)[i]
newDat <- mergeLabels_subset[mergeLabels_subset$EventID == event, ]
mergeLabels_subset$topLabelEvent[i] <- newDat[which.max(newDat$topLabelScore), "topLabel"]
mergeLabels_subset$date_timeEvent[i] <- newDat[which.max(newDat$topLabelScore), "date_time"]
}
names(mergeLabels_subset)
mergeLabels_subset_events <- unqiue(mergeLabels_subset[,c("FileName_New",
"Station",
"Species_Appsilon",
"date_timeEvent",
"topLabelEvent",
"EventID"
)])
mergeLabels_subset_events <- unique(mergeLabels_subset[,c("FileName_New",
"Station",
"Species_Appsilon",
"date_timeEvent",
"topLabelEvent",
"EventID"
)])
head(mergeLabels_subset_events )
# Select the species with highers probability in each event
mergeLabels_subset$topLabelEvent <- NA
mergeLabels_subset$date_timeEvent <- NA
for(i in 1:length(unique(mergeLabels_subset$EventID))){
event <- unique(mergeLabels_subset$EventID)[i]
newDat <- mergeLabels_subset[mergeLabels_subset$EventID == event, ]
mergeLabels_subset$topLabelEvent[i] <- newDat[which.max(newDat$topLabelScore), "topLabel"]
mergeLabels_subset$date_timeEvent[i] <- ymd_hms(newDat[which.max(newDat$topLabelScore), "date_time"])
}
mergeLabels_subset_events <- unique(mergeLabels_subset[,c("FileName_New",
"Station",
"Species_Appsilon",
"date_timeEvent",
"topLabelEvent",
"EventID"
)])
head(mergeLabels_subset_events)
ymd_hms(newDat[which.max(newDat$topLabelScore), "date_time"])
# Select the species with highers probability in each event
mergeLabels_subset$topLabelEvent <- NA
mergeLabels_subset$date_timeEvent <- ""
for(i in 1:length(unique(mergeLabels_subset$EventID))){
event <- unique(mergeLabels_subset$EventID)[i]
newDat <- mergeLabels_subset[mergeLabels_subset$EventID == event, ]
mergeLabels_subset$topLabelEvent[i] <- newDat[which.max(newDat$topLabelScore), "topLabel"]
mergeLabels_subset$date_timeEvent[i] <- as.character(ymd_hms(newDat[which.max(newDat$topLabelScore), "date_time"]))
}
mergeLabels_subset_events <- unique(mergeLabels_subset[,c("FileName_New",
"Station",
"Species_Appsilon",
"date_timeEvent",
"topLabelEvent",
"EventID"
)])
head(mergeLabels_subset_events)
mergeLabels_subset_events <- unique(mergeLabels_subset[,c("Station",
"Species_Appsilon",
"date_timeEvent",
"topLabelEvent",
"EventID"
)])
head(mergeLabels_subset_events)
# Select the species with highers probability in each event
mergeLabels_subset$topLabelEvent <- NA
mergeLabels_subset$date_timeEvent <- ""
for(i in 1:length(unique(mergeLabels_subset$EventID))){
event <- unique(mergeLabels_subset$EventID)[i]
newDat <- mergeLabels_subset[mergeLabels_subset$EventID == event, ]
mergeLabels_subset$topLabelEvent[i] <- newDat[which.max(newDat$topLabelScore), "topLabel"]
mergeLabels_subset$date_timeEvent[i] <- as.character(as.Date(ymd_hms(newDat[which.max(newDat$topLabelScore), "date_time"])))
}
mergeLabels_subset_events <- unique(mergeLabels_subset[,c("Station",
"Species_Appsilon",
"date_timeEvent",
"topLabelEvent",
"EventID"
)])
head(mergeLabels_subset_events)
i = 1
event <- unique(mergeLabels_subset$EventID)[i]
newDat <- mergeLabels_subset[mergeLabels_subset$EventID == event, ]
newDat
as.factor(newDat[which.max(newDat$topLabelScore), "topLabel"])
mergeLabels_subset$topLabelEvent[i]
mergeLabels_subset$topLabelEvent[i] <- as.factor(newDat[which.max(newDat$topLabelScore), "topLabel"])
# Select the species with highers probability in each event
mergeLabels_subset$topLabelEvent <- mergeLabels_subset$topLabel
mergeLabels_subset$date_timeEvent <- ""
event <- unique(mergeLabels_subset$EventID)[i]
newDat <- mergeLabels_subset[mergeLabels_subset$EventID == event, ]
mergeLabels_subset$topLabelEvent[i] <- as.factor(newDat[which.max(newDat$topLabelScore), "topLabel"])
mergeLabels_subset$topLabelEvent[i]
mergeLabels_subset$topLabelEvent[i] <-newDat[which.max(newDat$topLabelScore), "topLabel"]
mergeLabels_subset$topLabelEvent[i]
mergeLabels_subset$date_timeEvent[i] <- as.character(as.Date(ymd_hms(newDat[which.max(newDat$topLabelScore), "date_time"])))
mergeLabels_subset$date_timeEvent[i]
# Select the species with highers probability in each event
mergeLabels_subset$topLabelEvent <- mergeLabels_subset$topLabel
mergeLabels_subset$date_timeEvent <- ""
for(i in 1:length(unique(mergeLabels_subset$EventID))){
event <- unique(mergeLabels_subset$EventID)[i]
newDat <- mergeLabels_subset[mergeLabels_subset$EventID == event, ]
mergeLabels_subset$topLabelEvent[i] <-newDat[which.max(newDat$topLabelScore), "topLabel"]
mergeLabels_subset$date_timeEvent[i] <- as.character(as.Date(ymd_hms(newDat[which.max(newDat$topLabelScore), "date_time"])))
}
mergeLabels_subset_events <- unique(mergeLabels_subset[,c("Station",
"Species_Appsilon",
"date_timeEvent",
"topLabelEvent",
"EventID"
)])
head(mergeLabels_subset_events)
i = 2
event <- unique(mergeLabels_subset$EventID)[i]
event
mergeLabels_subset[mergeLabels_subset$EventID == event, ]
eventList <- vector("list", length = length(unique(mergeLabels_subset$EventID)))
# Select the species with highers probability in each event
mergeLabels_subset$topLabelEvent <- mergeLabels_subset$topLabel
mergeLabels_subset$date_timeEvent <- ""
eventList <- vector("list", length = length(unique(mergeLabels_subset$EventID)))
# Select the species with highers probability in each event
mergeLabels_subset$topLabelEvent <- mergeLabels_subset$topLabel
mergeLabels_subset$date_timeEvent <- ""
eventList <- vector("list", length = length(unique(mergeLabels_subset$EventID)))
for(i in 1:length(unique(mergeLabels_subset$EventID))){
event <- unique(mergeLabels_subset$EventID)[i]
newDat <- mergeLabels_subset[mergeLabels_subset$EventID == event, ]
newDat$topLabelEvent <- newDat[which.max(newDat$topLabelScore), "topLabel"]
newDat$date_timeEvent <- as.character(as.Date(ymd_hms(newDat[which.max(newDat$topLabelScore), "date_time"])))
eventList[[i]] <- newDat
}
mergeLabels_subset_events <- do.call("rbind", eventList)
mergeLabels_subset_events <- unique(mergeLabels_subset_events[,c("Station",
"Species_Appsilon",
"date_timeEvent",
"topLabelEvent",
"EventID"
)])
head(mergeLabels_subset_events)
eventList[[1]]
newDat
eventList[[10]]
mergeLabels_subset_events <- unique(mergeLabels_subset_events[,c("Station",
"Species_Appsilon",
"date_timeEvent",
"topLabelEvent",
"EventID"
)])
head(mergeLabels_subset_events)
length(unique(mergeLabels_subset$EventID))
mergeLabels_subset_events <- unique(mergeLabels_subset_events[,c("Station",
"Species_Appsilon",
"date_timeEvent",
"topLabelEvent"
)])
head(mergeLabels_subset_events)
confusionMatrix(mergeLabels_subset_events$topLabelEvent, mergeLabels_subset_events$Species_Appsilon)
library(caret)
confusionMatrix(mergeLabels_subset_events$topLabelEvent, mergeLabels_subset_events$Species_Appsilon)
install.packages("golem")
library(golem)
golem::create_golem(pat)
golem::create_golem(path = "/home/robbie/Documents/GitHub/MbazaDoployez")
golem::create_golem(path = "/home/robbie/Documents/GitHub/MbazaDeployez")
setwd("~/Documents/GitHub/ElephantFruitsGabon/bodyCondition/data")
list.files()
dat <- read.csv(list.files()[1])
dat$initials
dat$initials <- NA
head(dat)
list.files()[1]
write.csv(dat,  "public_bodyCondition_Dec2019.csv")
dat <- read.csv(list.files()[1])
dat$initials <- NA
write.csv(dat,  "public_bodyCondition_Dec2019.csv", row.names = F)
